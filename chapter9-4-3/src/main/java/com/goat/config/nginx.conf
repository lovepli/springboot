# 启动进程,通常设置成和 CPU 的数量相等
worker_processes  1;

events {
  # epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式
  # 但是仅用于 linux2.6 以上内核,可以大大提高 nginx 的性能
  use epoll;
  # 单个后台 worker process 进程的最大并发链接数
  worker_connections  1024;
}

http {
  # 设定 mime 类型,类型由 mime.type 文件定义
  include       mime.types;
  default_type  application/octet-stream;

  # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
  # 必须设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的 uptime.
  sendfile        on;

  # 连接超时时间
  keepalive_timeout  65;
  # 设定请求缓冲
  client_header_buffer_size 2k;

  # 配置虚拟主机 172.16.163.135
  server {
    # 监听的ip和端口，配置 172.16.163.135:80
    listen       80;
    # 虚拟主机名称这里配置ip地址
    server_name  172.16.163.135;
    # 所有的请求都以 / 开始，所有的请求都可以匹配此 location
    location / {
      # 使用 root 指令指定虚拟主机目录即网页存放目录
      # 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html
      # 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html
      # sos 这里指定的容器内的目录！！！ 而不是宿主机的目录 root  /home/goat/nginx/wwwroot/html80;
      root   /usr/share/nginx/wwwroot/html80;
      # 指定欢迎页面，按从左到右顺序查找
      index  index.html index.htm;
    }

  }
  # 配置虚拟主机 172.16.163.135
  # root  /home/goat/nginx/wwwroot/html8080
  server {
    listen       8080;
    server_name  172.16.163.135;

    location / {
      root   /usr/share/nginx/wwwroot/html8080;
      index  index.html index.htm;
    }
  }
  #  proxy_pass http://tomcat1:8080; 中的 tomcat1 即为 docker-compose.yml 中的   tomcat1: 在一个 docker-compose.yml 文件中 的容器 都在一个局域网中 那么服务名就是计算机名
  # sos  server {...} 中 listen 后的端口 必须要在 docker-compose.yml 中的 nginx 的ports 属性中 暴露出来 否则 是无法访问的！！！！！！！！！
  server {
    listen 1234;
    server_name 172.16.163.135;
    location / {
      proxy_pass http://tomcat1:8080;
        index index.jsp index.html index.htm;
    }
  }
}